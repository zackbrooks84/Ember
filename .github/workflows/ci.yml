name: ci

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pytest:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz libgraphviz-dev pkg-config

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi
          pip install -r requirements.txt
          # Ensure pytest, xdist, and coverage are present
          pip install pytest pytest-xdist pytest-cov
          pip freeze > pip-freeze.txt

      - name: Create golden snapshot if missing
        env:
          PYTHONWARNINGS: default
        run: |
          set -euxo pipefail
          if [ ! -f tests/_golden_metrics.json ]; then
            UPDATE_GOLDEN=1 pytest -q tests/test_golden_metrics.py 2>&1 | tee golden.out
          else
            echo "golden metrics already exist" | tee golden.out
          fi

      - name: Pytest collect-only
        id: collect
        shell: bash
        run: |
          set -euxo pipefail
          pytest --collect-only -q 2>&1 | tee collect.out
          echo "collected=ok" >> "$GITHUB_OUTPUT"

      - name: Run test suite
        id: run
        shell: bash
        run: |
          set -euxo pipefail
          # Use xdist if available to speed up tests
          PYTEST_ADDOPTS=${PYTEST_ADDOPTS:-"-n auto"}
          pytest -v tests/ --maxfail=1 --durations=25 \
                --junitxml=report.xml \
                --cov=. --cov-report=xml:coverage.xml --cov-report=term-missing \
                $PYTEST_ADDOPTS 2>&1 | tee pytest.out
          status=${PIPESTATUS[0]}
          echo "status=$status" >> "$GITHUB_OUTPUT"
          exit $status

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-${{ matrix.python-version }}
          path: |
            pytest.out
            collect.out
            golden.out
            report.xml
            coverage.xml
            pip-freeze.txt
          if-no-files-found: ignore