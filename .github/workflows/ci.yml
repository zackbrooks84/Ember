name: tests (windows-only)

on:
  push:
  pull_request:

jobs:
  # quick sanity pass — unit tests only
  light:
    name: Light tests (unit-only) — Windows, Py${{ matrix.python-version }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install Graphviz (Windows)
        shell: powershell
        run: |
          choco install graphviz --no-progress -y
          echo "C:\\Program Files\\Graphviz\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install deps
        shell: bash
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt
          # dev tools + pytest
          pip install -r requirements-dev.txt
          # fallbacks: don't fail the light pass if optional heavy libs are missing
          pip install sentence-transformers PyMuPDF scikit-learn pygraphviz || true
          pip freeze > pip-freeze.txt

      - name: Pytest (unit-only markers)
        shell: bash
        env:
          # Skip slow / optional tests in the light job
          PYTEST_ADDOPTS: "-m 'not heavy and not empirical'"
        run: |
          pytest -q --collect-only | tee collect.out
          pytest -v --maxfail=1 --durations=25 | tee pytest.out
        continue-on-error: false

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: light-windows-py${{ matrix.python-version }}
          path: |
            collect.out
            pytest.out
            pip-freeze.txt
          if-no-files-found: ignore

  # full suite
  full:
    name: Full tests (all markers) — Windows, Py${{ matrix.python-version }}
    runs-on: windows-latest
    needs: light
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install Graphviz (Windows)
        shell: powershell
        run: |
          choco install graphviz --no-progress -y
          echo "C:\\Program Files\\Graphviz\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install deps (include heavy/optional)
        shell: bash
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          # try the heavier optional libs; allow pygraphviz to fail gracefully on Windows
          pip install sentence-transformers PyMuPDF scikit-learn || true
          pip install pygraphviz || echo "pygraphviz build failed; plot tests may be skipped"
          pip freeze > pip-freeze.txt

      - name: Create golden snapshot if missing
        shell: bash
        env:
          PYTHONWARNINGS: default
        run: |
          if [ ! -f tests/_golden_metrics.json ]; then
            UPDATE_GOLDEN=1 pytest -q tests/test_golden_metrics.py | tee golden.out
          else
            echo "golden metrics already exist" | tee golden.out
          fi

      - name: Pytest (full suite)
        shell: bash
        run: |
          pytest -q --collect-only | tee collect.out
          # Run everything except explicitly @pytest.mark.heavy if you want truly all, remove the -m filter.
          pytest -v --maxfail=1 --durations=25 \
                 --junitxml=report.xml \
                 -m "not heavy" | tee pytest.out

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-windows-py${{ matrix.python-version }}
          path: |
            collect.out
            pytest.out
            golden.out
            report.xml
            pip-freeze.txt
          if-no-files-found: ignore
