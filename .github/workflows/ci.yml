name: Tests

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  # ---------------- Light: quick/unit tests ----------------
  light:
    name: Light tests (unit-only)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [ "3.11" ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip (light)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-light-${{ hashFiles('requirements-light.txt', 'requirements-dev-light.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-light-

      - name: Install deps (light)
        run: |
          python -m pip install -U pip setuptools wheel
          pip install -r requirements-dev-light.txt
        shell: bash

      - name: Collect tests (light)
        run: pytest --collect-only -q 2>&1 | tee collect_light.out
        shell: bash

      - name: Run pytest (light)
        run: |
          pytest -q -m "not slow and not empirical and not integration" \
            --maxfail=1 --durations=25 --junitxml=report_light.xml 2>&1 | tee pytest_light.out
        shell: bash

      - name: Upload artifacts (light)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-light-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            collect_light.out
            pytest_light.out
            report_light.xml
          if-no-files-found: ignore

  # ---------------- Full: heavy deps + golden + all tests ----------------
  full:
    name: Full tests (all markers)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [ "3.11", "3.12" ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # ---- OS packages for Graphviz ----
      - name: Install Graphviz (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz libgraphviz-dev pkg-config
        shell: bash

      - name: Install Graphviz (Windows)
        if: runner.os == 'Windows'
        run: choco install graphviz -y
        shell: powershell

      - name: Cache pip (full)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-full-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-full-

      - name: Install Python deps (full)
        run: |
          python -m pip install -U pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          # CPU-only torch for sentence-transformers (works on both OSes)
          pip install torch --index-url https://download.pytorch.org/whl/cpu
          pip freeze > pip-freeze.txt
        shell: bash

      - name: Verify Graphviz is on PATH
        run: dot -V
        shell: bash

      # ---- Golden snapshot (use bash syntax across OS; bash exists on Windows runners) ----
      - name: Create golden snapshot if missing
        run: |
          if [ ! -f tests/_golden_metrics.json ]; then
            UPDATE_GOLDEN=1 pytest -q tests/test_golden_metrics.py 2>&1 | tee golden.out
          else
            echo "golden metrics already exist" | tee golden.out
          fi
        shell: bash
        env:
          PYTHONWARNINGS: default

      - name: Collect tests (full)
        run: pytest --collect-only -q 2>&1 | tee collect_full.out
        shell: bash

      - name: Run pytest (full suite)
        run: |
          pytest -v tests/ --maxfail=1 --durations=25 \
                --junitxml=report_full.xml 2>&1 | tee pytest_full.out
        shell: bash

      - name: Upload artifacts (full)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-full-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            pytest_full.out
            collect_full.out
            golden.out
            report_full.xml
            pip-freeze.txt
          if-no-files-found: ignore
