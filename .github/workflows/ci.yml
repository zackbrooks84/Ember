name: ci

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONUNBUFFERED: "1"
  PYTEST_ADDOPTS: "-n auto"

jobs:
  lint:
    name: Lint (ruff) and format check (non-blocking)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true   # <-- keep feedback, never block PRs
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            setup.cfg
            ruff.toml

      - name: Install lint dependencies
        run: |
          python -m pip install -U pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt || true
          fi
          python -m pip install ruff

      - name: Run ruff (warn-only)
        run: |
          ruff --version
          # Never fail CI: produce annotations but exit 0
          ruff check . --output-format=github --exit-zero
          # Format check is also warn-only
          ruff format --check || true

  typecheck:
    name: Type check (mypy)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            mypy.ini
            setup.cfg

      - name: Install typing deps
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi
          python -m pip install mypy types-requests types-setuptools

      - name: Run mypy if config present
        run: |
          if [ -f mypy.ini ] || grep -q "\[tool.mypy\]" pyproject.toml 2>/dev/null || grep -q "mypy" setup.cfg 2>/dev/null; then
            mypy .
          else
            echo "No mypy configuration found. Skipping type check."
          fi

  pytest:
    name: Tests (pytest ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [typecheck]    # <-- do not depend on lint, so tests still run
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            setup.cfg

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz libgraphviz-dev pkg-config

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi
          pip install pytest pytest-xdist pytest-cov
          pip freeze > pip-freeze.txt

      - name: Create golden snapshot if missing
        env:
          PYTHONWARNINGS: default
        run: |
          set -euxo pipefail
          if [ ! -f tests/_golden_metrics.json ] && [ -f tests/test_golden_metrics.py ]; then
            UPDATE_GOLDEN=1 pytest -q tests/test_golden_metrics.py 2>&1 | tee golden.out
          else
            echo "golden metrics already exist or no golden test present" | tee golden.out
          fi

      - name: Pytest collect-only
        id: collect
        shell: bash
        run: |
          set -euxo pipefail
          pytest --collect-only -q 2>&1 | tee collect.out
          echo "collected=ok" >> "$GITHUB_OUTPUT"

      - name: Run test suite
        id: run
        shell: bash
        env:
          PYTEST_ADDOPTS: ${{ env.PYTEST_ADDOPTS }}
        run: |
          set -euxo pipefail
          pytest -v tests/ --maxfail=1 --durations=25 \
                --junitxml=report.xml \
                --cov=. --cov-report=xml:coverage.xml --cov-report=term-missing \
                ${PYTEST_ADDOPTS} 2>&1 | tee pytest.out
          status=${PIPESTATUS[0]}
          echo "status=$status" >> "$GITHUB_OUTPUT"
          exit $status

      - name: Security audit (pip-audit)
        if: always()
        run: |
          python -m pip install pip-audit || true
          if [ -f requirements.txt ]; then pip-audit -r requirements.txt || true; else echo "No requirements.txt"; fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-${{ matrix.python-version }}
          path: |
            pytest.out
            collect.out
            golden.out
            report.xml
            coverage.xml
            pip-freeze.txt
          if-no-files-found: ignore
          retention-days: 14